#!/usr/bin/env python
#
# Copyright (c) 2007 Jean-Francois Richard <jean-francois@richard.name>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

import commands
import gobject
import gtk
import os
import os.path
import signal
import sys
import time
import subprocess
import vte

def get_ghh():
    return os.path.abspath(os.path.join(sys.path[0], "git-home-history"))

def image_label_box(parent, stock_icon_name, label, size=gtk.ICON_SIZE_BUTTON, box_spacing=0):
    box1 = gtk.HBox(False, spacing=box_spacing)
    box1.set_border_width(2)
    image = gtk.Image()
    image.set_from_stock(stock_icon_name, size)
    # Pack the pixmap and label into the box
    box1.pack_start(image, False, False, 3)
    box1.pack_start(label, False, False, 3)
    image.show()
    label.show()
    return box1




class GHHTermExecutor(object):
    def __init__(self, parent, toexec, message):
        self.parent = parent
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_border_width(12)
        self.window.connect("delete_event", self.delete_event)

        self.pbar = gtk.ProgressBar()

        self.terminal = vte.Terminal()
        self.tscrollbar = gtk.VScrollbar()
        self.tscrollbar.set_adjustment(self.terminal.get_adjustment())
        self.terminal.set_scrollback_lines(512)
        self.terminal.set_scroll_on_output(True)

        self.thbox = gtk.HBox()
        self.thbox.pack_start(self.terminal, False, False)
        self.thbox.pack_start(self.tscrollbar)

        self.message = gtk.Label()
        self.message.set_markup(message)
        self.mbox = image_label_box(self.window, gtk.STOCK_SAVE, self.message, gtk.ICON_SIZE_DIALOG, 6)

        self.vbox = gtk.VBox(spacing=6)
        self.vbox.pack_start(self.mbox)
        self.vbox.pack_start(self.pbar)
        self.vbox.pack_start(self.thbox)

        self.window.add(self.vbox)
        gobject.idle_add(self.do, toexec)
        self.timeout = gobject.timeout_add(200, self.pulse)
        self.terminal.connect('child-exited', self.command_done)


    def command_done(self, widget):
        self.pid = None
        self.message.set_markup("<b>Done</b>\n\nYou can now close this window")
        self.pbar.set_fraction(1.0)
        gobject.source_remove(self.timeout)

    def pulse(self):
        self.pbar.pulse()
        return True

    def do(self, toexec):
        command = toexec.split(' ')
        self.pid = self.terminal.fork_command(command=command[0], argv=command)
        return False

    def show_all(self):
        self.window.show_all()

    def delete_event(self, widget, event, data=None):
        if self.pid != None:
            os.kill(self.pid, signal.SIGKILL)
        self.parent.get_back_commitbutton()
        self.window.destroy()
        return False

class GHHApp(object):
    def __init__(self):
        commands.getstatusoutput("git-home-history init")
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_title("gtk-git-home-history")
        self.window.set_size_request(800, 600)
        self.window.set_border_width(12)
        self.window.connect("delete_event", self.delete_event)

        self.liststore = gtk.ListStore(str)
        self.treeview = gtk.TreeView(self.liststore)

        self.tvcolumn = gtk.TreeViewColumn('Files')
        self.treeview.append_column(self.tvcolumn)

        self.cell = gtk.CellRendererText()
        self.tvcolumn.pack_start(self.cell, True)
        self.tvcolumn.add_attribute(self.cell, 'text', 0)

        self.label1 = gtk.Label("")
        self.label1.set_markup("<b>List files stored as of:</b>")

        self.calendar = gtk.Calendar()

        self.thbox = gtk.HBox(spacing=6)
        self.hentry = gtk.SpinButton(gtk.Adjustment(time.localtime().tm_hour,0,23,1))
        self.mentry = gtk.SpinButton(gtk.Adjustment(time.localtime().tm_min,0,59,1))
        self.thbox.pack_start(gtk.Label("At this time: "), False)
        self.thbox.pack_start(self.hentry, False)
        self.thbox.pack_start(gtk.Label("h"), False)
        self.thbox.pack_start(self.mentry, False)
        self.thbox.pack_start(gtk.Label("m"), False)
        self.thbox.pack_start(gtk.Label(), True)


        self.refresh_list = gtk.Button()
        self.refresh_list.add(image_label_box(self.window, gtk.STOCK_REFRESH, gtk.Label("Refresh the file list")))
        self.refresh_list.connect("clicked", self.restart_refresh_file_list)


        self.commitbutton = gtk.Button()
        self.commitbutton.add(image_label_box(self.window, gtk.STOCK_SAVE, gtk.Label("Commit now")))

        self.commitbutton.connect("clicked", self.commit_now)

        self.optionslabel = gtk.Label("")
        self.optionslabel.set_markup("<b>Options</b>")
        self.autostart = gtk.CheckButton("Commit the state of my home\ndirectory when I log in")
        self.autostart.set_active(Autostart().is_enabled())
        self.autostart.connect("toggled", self.toggle_autostart)
        # make sure we always have the most recent .desktop file in there
        if self.autostart.get_active():
            Autostart().remove()
            Autostart().add()
        self.editrules = gtk.Button()
        self.editrules.add(image_label_box(self.window, gtk.STOCK_EDIT, gtk.Label("Edit ignore rules")))
        self.editrules.connect("clicked", self.edit_rules)

        self.hbox1 = gtk.HBox(False, 6)
        self.vbox1 = gtk.VBox(False, 6)
        self.hbox2 = gtk.HBox(False, 0)
        self.swindow = gtk.ScrolledWindow()
        self.swindow.add_with_viewport(self.treeview)
        self.hbox2.pack_start(self.label1, False)
        self.hbox3 = gtk.HBox(False, 0)
        self.hbox3.pack_start(self.optionslabel, False)

        self.vbox1.pack_start(self.hbox2, False)
        self.vbox1.pack_start(self.calendar, False)
        self.vbox1.pack_start(self.thbox, False)
        self.vbox1.pack_start(self.refresh_list, False)
        self.vbox1.pack_start(gtk.Label())
        self.vbox1.pack_start(self.hbox3, False)
        self.vbox1.pack_start(self.autostart, False)
        self.vbox1.pack_start(self.editrules, False)
        self.vbox1.pack_start(gtk.Label())
        self.vbox1.pack_start(self.commitbutton, False)

        self.hbox1.pack_start(self.vbox1, False)
        self.hbox1.pack_start(self.swindow)
        self.window.add(self.hbox1)
        self.window.show_all()

        self.idle_id = None
        self.subprocess = None
        self.restart_refresh_file_list(None)

    def activate_action(self, action, string):
        print 'Action ' + action.get_name() + ' activated ' + str(string)

    def commit_now(self, widget):
        self.commitbutton.set_sensitive(False)
        self.terminal = GHHTermExecutor(self, "%s commit" % get_ghh(), "<b>Please wait while committing...</b>\n\nThis operation can take a while")
        self.terminal.show_all()

    def get_back_commitbutton(self):
        self.commitbutton.set_sensitive(True)

    def edit_rules(self, widget):
        subprocess.Popen("xdg-open ~/.gitignore", shell=True)

    def delete_event(self, widget, event, data=None):
        gtk.main_quit()
        return False

    def toggle_autostart(self, widget):
        if self.autostart.get_active():
            Autostart().add()
        else:
            Autostart().remove()

    def calendar_date_to_string(self):
        year, month, day = self.calendar.get_date()
        mytime = time.mktime((year, month+1, day, 0, 0, 0, 0, 0, -1))
        return time.strftime("%F", time.localtime(mytime))

    def stop_refresh_file_list(self):
        # exists and no return value (thus still executing)
        if self.subprocess != None and self.subprocess.poll() == None:
            self.subprocess.stdout.close()
        if self.idle_id != None:
            gobject.source_remove(self.idle_id)
        self.subprocess = None

    def restart_refresh_file_list(self, widget):
        self.stop_refresh_file_list()
        self.liststore.clear()
        timespec = "%s %s:%s" % (self.calendar_date_to_string(),
                                 self.hentry.get_value_as_int(),
                                 self.mentry.get_value_as_int())
        self.idle_id = gobject.idle_add(self.refresh_file_list, timespec)

    def refresh_file_list(self, timespec):
        if self.subprocess == None:
            print "%s ls-stored-files as of %s" % (get_ghh(), timespec)
            self.subprocess = subprocess.Popen(
                "%s ls-stored-files as of %s" % (get_ghh(), timespec),
                shell=True,
                stdout=subprocess.PIPE,
                close_fds=True)

        # Read 16 lines at a time for maximum interactivity
        for i in range(0, 16):
            line = self.subprocess.stdout.readline()
            if len(line) > 0:
                self.liststore.append([line.strip()])

        if len(line) == 0 and self.subprocess.poll() != None:
            return False
        # not finished yet ...  call back please, until end of
        # consumption of child output
        return True


class Autostart:
    def __init__(self):
        if "KDE_FULL_SESSION" in os.environ:
            autostart_dir = os.path.expanduser("~/.kde/Autostart")
        else:
            config_home = os.environ.get('XDG_CONFIG_HOME', '~/.config')
            self.autostart_dir = os.path.join(
                os.path.expanduser(config_home),
                "autostart")
        self.destination = os.path.join (
            self.autostart_dir,
            "git-home-history.desktop")

    def is_enabled(self):
        return os.path.exists(self.destination)

    def add(self):
        if os.path.exists(self.destination):
            return
        try:
            os.makedirs(self.autostart_dir)
        except:
            pass
        try:
            f = open(self.destination, "w")
            f.write(
"""[Desktop Entry]
Version=1.0
Type=Application
Name=git-home-history
TryExec=%(p)s
Exec=nice %(p)s private--init-and-commit
""" % {"p" : get_ghh() })
            f.close()
        except:
            pass

    def remove(self):
        if not os.path.exists(self.destination):
            return
        try:
            os.remove (self.destination)
            os.removedirs(self.autostart_dir)
        except:
            pass


def main():
    gtk.main()

if __name__ == "__main__":
    g = GHHApp()
    main()
